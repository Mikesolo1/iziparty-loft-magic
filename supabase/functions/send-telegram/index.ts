// –ü–æ–ª—É—á–∞–µ–º TELEGRAM_BOT_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
if (!BOT_TOKEN) throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!");

// –ñ—ë—Å—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
const TARGET_CHAT_ID = -1002916514018;

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
const CORS_HEADERS = new Headers({
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
});

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000
const listener = Deno.listen({ port: 8000 });
console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000");

for await (const conn of listener) {
  (async () => {
    const httpConn = Deno.serveHttp(conn);
    for await (const requestEvent of httpConn) {
      try {
        const req = requestEvent.request;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –¥–ª—è CORS
        if (req.method === "OPTIONS") {
          requestEvent.respondWith(new Response(null, { headers: CORS_HEADERS }));
          continue;
        }

        if (req.method !== "POST") {
          requestEvent.respondWith(
            new Response(JSON.stringify({ error: "Method not allowed" }), {
              status: 405,
              headers: { ...Object.fromEntries(CORS_HEADERS.entries()), "Content-Type": "application/json" },
            })
          );
          continue;
        }

        const body = await req.json();
        const { phone, date, name } = body;

        if (!phone || !date) {
          requestEvent.respondWith(
            new Response(JSON.stringify({ error: "Phone and date are required" }), {
              status: 400,
              headers: { ...Object.fromEntries(CORS_HEADERS.entries()), "Content-Type": "application/json" },
            })
          );
          continue;
        }

        const nameText = name ? `üë§ –ò–º—è: ${name}\n` : '';
        const message = `üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n${nameText}üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${date}\n\n‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`;

        console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Telegram:", { chatId: TARGET_CHAT_ID, phone, date });

        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: TARGET_CHAT_ID,
            text: message,
            parse_mode: "HTML",
          }),
        });

        const responseData = await response.json();

        if (!response.ok) {
          console.error("Telegram API error:", responseData);
          requestEvent.respondWith(
            new Response(JSON.stringify({ error: "Failed to send message to Telegram", details: responseData }), {
              status: 500,
              headers: { ...Object.fromEntries(CORS_HEADERS.entries()), "Content-Type": "application/json" },
            })
          );
          continue;
        }

        console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É:", TARGET_CHAT_ID);

        requestEvent.respondWith(
          new Response(JSON.stringify({ success: true, data: responseData }), {
            status: 200,
            headers: { ...Object.fromEntries(CORS_HEADERS.entries()), "Content-Type": "application/json" },
          })
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ send-telegram:", error);
        requestEvent.respondWith(
          new Response(JSON.stringify({ error: error.message }), {
            status: 500,
            headers: { ...Object.fromEntries(CORS_HEADERS.entries()), "Content-Type": "application/json" },
          })
        );
      }
    }
  })();
}
