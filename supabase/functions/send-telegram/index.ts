import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
const SUPERGROUP_CHAT_ID = -1002916514018;

interface TelegramRequest {
  phone: string;
  date: string;
  name?: string;
  guests?: string;
  type?: string;
}

const handler = async (req: Request): Promise<Response> => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  if (req.method !== "POST") {
    return new Response(
      JSON.stringify({ error: "Method not allowed" }), 
      {
        status: 405,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const botToken = Deno.env.get("TELEGRAM_BOT_TOKEN");
    if (!botToken) {
      console.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
      return new Response(
        JSON.stringify({ error: "Bot token not configured" }), 
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body: TelegramRequest = await req.json();
    const { phone, date, name, guests, type } = body;

    if (!phone || !date) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: phone –∏–ª–∏ date");
      return new Response(
        JSON.stringify({ error: "Phone and date are required" }), 
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:", { phone, date, name, guests, type });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    let formType = "üìã –û–±—â–∞—è –∑–∞—è–≤–∫–∞";
    if (type === "callback") {
      formType = "üìû –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫";
    } else if (type === "price") {
      formType = "üí∞ –ó–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏";
    } else if (type === "booking") {
      formType = "üéâ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ";
    } else if (type === "contact") {
      formType = "‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞";
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const nameText = name ? `üë§ –ò–º—è: ${name}\n` : "";
    const guestsText = guests ? `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${guests}\n` : "";
    const currentTime = new Date().toLocaleString("ru-RU", { timeZone: "Europe/Moscow" });
    
    const message = `${formType}

${nameText}üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
${guestsText}üìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${date}

‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: ${currentTime}`;

    console.log("üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏");
    console.log("üéØ –¶–µ–ª–µ–≤–æ–π chat_id —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã:", SUPERGROUP_CHAT_ID);
    console.log("üîë –¢–∏–ø chat_id:", typeof SUPERGROUP_CHAT_ID);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const telegramPayload = {
      chat_id: SUPERGROUP_CHAT_ID,
      text: message,
      parse_mode: "HTML",
    };
    
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π payload:", JSON.stringify(telegramPayload));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    const telegramResponse = await fetch(telegramUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(telegramPayload),
    });

    const responseData = await telegramResponse.json();

    if (!telegramResponse.ok || !responseData.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", responseData);
      return new Response(
        JSON.stringify({ 
          error: "Failed to send message to Telegram", 
          details: responseData 
        }), 
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–¥–∞ —É—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const actualChatId = responseData.result?.chat?.id;
    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    console.log("üì¨ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π chat_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", actualChatId);
    
    if (actualChatId !== SUPERGROUP_CHAT_ID) {
      console.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ –≤ —Ç—É –≥—Ä—É–ø–ø—É!");
      console.warn(`   –û–∂–∏–¥–∞–ª—Å—è: ${SUPERGROUP_CHAT_ID}`);
      console.warn(`   –ü–æ–ª—É—á–µ–Ω: ${actualChatId}`);
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        chatId: actualChatId,
        message: "Message sent successfully" 
      }), 
      {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send-telegram:", errorMessage);
    
    return new Response(
      JSON.stringify({ error: errorMessage }), 
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
};

console.log("üöÄ Edge Function –∑–∞–ø—É—â–µ–Ω–∞");
console.log("üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É:", SUPERGROUP_CHAT_ID);

serve(handler);
