import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ CORS –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// –ñ–ï–°–¢–ö–û –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π chat_id —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã - –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è!
const TARGET_CHAT_ID = -1002916514018;

interface TelegramRequest {
  phone: string;
  date: string;
  name?: string;
  guests?: string;
}

const handler = async (req: Request): Promise<Response> => {
  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
  console.log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===");
  console.log("TARGET_CHAT_ID:", TARGET_CHAT_ID);
  console.log("–¢–∏–ø TARGET_CHAT_ID:", typeof TARGET_CHAT_ID);
  console.log("–û–∂–∏–¥–∞–µ–º —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å ID:", -1002916514018);
  console.log("===================");

  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  if (req.method !== "POST") {
    return new Response(JSON.stringify({ error: "Method not allowed" }), {
      status: 405,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }

  try {
    const { phone, date, name, guests }: TelegramRequest = await req.json();

    if (!phone || !date) {
      return new Response(JSON.stringify({ error: "Phone and date are required" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const botToken = Deno.env.get("TELEGRAM_BOT_TOKEN");
    if (!botToken) {
      return new Response(JSON.stringify({ error: "Bot token not configured" }), {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const nameText = name ? `üë§ –ò–º—è: ${name}\n` : "";
    const guestsText = guests ? `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${guests}\n` : "";
    const message = `üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n${nameText}üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n${guestsText}üìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${date}\n\n‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString("ru-RU")}`;

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:", { 
      targetChatId: TARGET_CHAT_ID,
      phone, 
      date, 
      name, 
      guests 
    });

    // –ñ–ï–°–¢–ö–û –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º chat_id –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    const telegramRequestBody = {
      chat_id: -1002916514018, // –ü—Ä—è–º–æ –∑–¥–µ—Å—å –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π ID
      text: message,
      parse_mode: "HTML",
    };

    console.log("üì® –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram:", JSON.stringify(telegramRequestBody));

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(telegramRequestBody),
    });

    const responseData = await response.json();

    console.log("üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram API:", JSON.stringify(responseData, null, 2));

    if (!response.ok || !responseData.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Telegram API:", responseData);
      return new Response(
        JSON.stringify({ error: "Failed to send message to Telegram", details: responseData }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–¥–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (responseData.result.chat.id !== -1002916514018) {
      console.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ —É—à–ª–æ –Ω–µ –≤ —Ç—É –≥—Ä—É–ø–ø—É!");
      console.warn("–û–∂–∏–¥–∞–ª—Å—è chat_id: -1002916514018");
      console.warn("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π chat_id:", responseData.result.chat.id);
    }

    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");

    return new Response(JSON.stringify({ success: true, data: responseData }), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ send-telegram:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
};

// –õ–æ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");
console.log("üéØ –¶–µ–ª–µ–≤–æ–π chat_id —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã:", TARGET_CHAT_ID);
console.log("‚úÖ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: -1002916514018");

serve(handler);